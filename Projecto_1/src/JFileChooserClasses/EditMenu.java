/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package JFileChooserClasses;

import javax.swing.JOptionPane;
import org.graphstream.graph.Graph;
import org.graphstream.graph.implementations.MultiGraph;
import projecto_1.Classes.AdjMatrix;
import projecto_1.Classes.DataInterpreter;
import projecto_1.Classes.List;

/**
 *
 * @author RDG
 */
public class EditMenu extends javax.swing.JFrame {
    private static String archivo;
    String texto;
    boolean firstRun = false;
    int lastRGB = 0;
    int lastGroup = 0;
    int currentGroup = 0;

    /**
     * Creates new form Modificar
     */
    public EditMenu(String archivo){
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.archivo = archivo;
        
        jTextArea1.setText(archivo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Iniciar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("MODIFICAR GRAFO");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, 30));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 380, 260));

        Iniciar.setText("INICIAR");
        Iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IniciarActionPerformed(evt);
            }
        });
        jPanel1.add(Iniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 370, -1, -1));

        jLabel2.setText("Para agregar usuario, ingrese el @ del usuario junto a sus relaciones.");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 510, -1));

        jLabel3.setText("Para eliminar usuario, borre el @ del usuario junto a sus relaciones.");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 510, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 430, 410));

        pack();
    }// </editor-fold>                        

        private String getColor(){
        String color = "";
        switch(lastRGB){
            case 11:
                color = "rgb(255,178,102)";
                break;
            case 4:
                color = "rgb(255,255,102)";
                break;
            case 8:
                color = "rgb(178,255,102)";
                break;
            case 7:
                color = "rgb(102,255,102)";
                break;
            case 9:
                color = "rgb(102,255,178)";
                break;
            case 2:
                color = "rgb(102,255,255)";
                break;
            case 10:
                color = "rgb(102,178,255)";
                break;
            case 5:
                color = "rgb(102,102,255)";
                break;
            case 1:
                color = "rgb(178,102,255)";
                break;
            case 6:
                color = "rgb(255,102,255)";
                break;
            case 3:
                color = "rgb(255,102,178)";
                break;
            case 12:
                color = "rgb(255,255,255)";
                break;
            case 13:
                color = "rgb(0,0,0)";
                break;
        }
        return color;
    }
    
    public String modificarArchivo(String archivo) {
        boolean enSeccionUsuarios = false;
        boolean enSeccionRelaciones = false;
        boolean formatoValido = false;
        String texto = "";
        String[] lineas = archivo.split("\n");

        for (String linea : lineas) {
            if (linea.equals("usuarios")) {
                enSeccionUsuarios = true;
                enSeccionRelaciones = false;
                formatoValido = true;
                texto += linea + "\n"; 
                continue; 
            } else if (linea.equals("relaciones")) {
                enSeccionUsuarios = false;
                enSeccionRelaciones = true;
                formatoValido = true;
                texto += linea + "\n";
                continue; 
            }

            if (enSeccionUsuarios && linea.startsWith("@")) {
                texto += linea + "\n";
            } else if (enSeccionRelaciones && linea.matches("@\\w+, @\\w+")) {
                texto += linea + "\n";
            } else {
                formatoValido = false;
                break;
            }
        }

        if (!formatoValido) {
            JOptionPane.showMessageDialog(null,
                "Error: El archivo no cumple con el formato requerido.",
                "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
            return archivo;
        }

        return texto;
    }
    
    public String getData(){
        System.out.println(texto);
        return texto;
    }    
    
    private Graph iniciarGrafo(String newImportedData){
        String[] dataUsr = null;
        String[] dataFollow = null;
        DataInterpreter dataText = new DataInterpreter();
        dataText.setData(newImportedData);
        List data = new List();
        if (firstRun){
            //Uusa la data dada en los txt para diferenciar Usr de seguidores
            data = dataText.getDafaultData();
            dataUsr = (String[]) data.searchPos(0);
            dataFollow = (String[]) data.searchPos(1);
            firstRun = false;
        }
        else{
            //Uusa la data dada en los txt para diferenciar Usr de seguidores
            data = dataText.getData();
            dataUsr = (String[]) data.searchPos(0);
            dataFollow = (String[]) data.searchPos(1);
        }
        
        //crea la Matrix, el 3 no importa, el despues modifica el size
        AdjMatrix test = new AdjMatrix(3);
        
        //crea la lista que va a guardar a todos los grupos
        List stronglyConnected = new List();

        //aplica kosaraju y guarda los grupos en una lista
        stronglyConnected = test.kosaraju(dataUsr,dataFollow);
        
        System.out.println("TERMINE???");
        
        int groupNum = stronglyConnected.isSize();
//        System.out.println("Group Num: " + groupNum);
        
//
        Graph grafo = new MultiGraph("Grafo");
        System.setProperty("org.graphstream.ui", "swing");
        
        grafo.setAttribute("ui.stylesheet", 
                "node{\n"                   + 
                "size: 30px, 30px;\n"       +
                "fill-color: #ff0000;\n"    +
                "text-mode: normal;\n"      +
                "}");
//

        //esto es un print de que hay en cada grupo, pero sirve para acceder a cada dato dentro del grupo
        for (int i = 0; i < groupNum; i++) {
            System.out.print("Grupo "+(i+1)+": ");
            int[] specGroup = (int[]) stronglyConnected.searchPos(i);
            for (int x : specGroup) {
                String currentUsrID = dataUsr[x];
                //aqui se modifica lo que se va a hacer para cada item en el grupo
                if (specGroup.length < 2){
                    grafo.addNode(currentUsrID).setAttribute("ui.label", currentUsrID);
                    grafo.getNode(currentUsrID).setAttribute("ui.style", "fill-color: rgb(255,102,102);");
                    System.out.print("|" + x + " " + currentUsrID +"|");
                }else{
                    grafo.addNode(currentUsrID).setAttribute("ui.label", currentUsrID);
                    grafo.getNode(currentUsrID).setAttribute("ui.style", "fill-color: " + getColor() + ";");
                    System.out.print("|" + x + " " + currentUsrID +"|");
                }
              
            }
            System.out.println();

            if (currentGroup != lastGroup){         
            lastRGB++;
            }
            lastGroup = currentGroup;
            currentGroup++;
        }
        
        for (int i = 0; i < dataFollow.length; i++) {
            String tempFollow = dataFollow[i];
//            System.out.println(tempFollow);
            String followArray[] = tempFollow.split(", ");
//            System.out.println(followArray[0]);
//            System.out.println(followArray[1]);
            grafo.addEdge(followArray[0] + "_" + followArray[1], followArray[0], followArray[1]);
        }
        
        return grafo;
    }
    
    private void IniciarActionPerformed(java.awt.event.ActionEvent evt) {
        archivo = jTextArea1.getText();
//        System.out.println("ARCHIVO VIEJO");
//        System.out.println(archivo);
        String archivonuevo = modificarArchivo(archivo);
//        System.out.println("NUEVO ARCHIVO");
//        System.out.println(archivonuevo);
        //iniciarGrafo();
        this.setVisible(false);        
        Graph grafo = iniciarGrafo(archivonuevo);
        grafo.display();
        GraphMenu ventana2 = new GraphMenu(grafo, archivonuevo);
        ventana2.setVisible(true);
    }                                       

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditMenu(archivo).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Iniciar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}

//    private Graph mostrarGrafo(String archivo) {
//        Graph grafo = new MultiGraph("Grafo");
//        System.setProperty("org.graphstream.ui", "swing");
//
//        String[] lineas = archivo.split("\n");
//        String seccion = "";
//
//        for (String linea : lineas) {
//            if (linea.equals("usuarios")) {
//                seccion = "usuarios";
//            } else if (linea.equals("relaciones")) {
//                seccion = "relaciones";
//            } else {
//                if (seccion.equals("usuarios")) {
//                    grafo.addNode(linea);
//                } else if (seccion.equals("relaciones")) {
//                    String[] usuarios = linea.split(", ");
//                    if (usuarios.length == 2) {
//                        grafo.addEdge(usuarios[0] + "_" + usuarios[1], usuarios[0], usuarios[1]);
//                    }
//                }
//            }
//        }
//
//        return grafo;
//    }